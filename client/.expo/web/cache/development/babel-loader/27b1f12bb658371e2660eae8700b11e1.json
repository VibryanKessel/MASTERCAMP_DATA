{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nexport function throwIfInvalidProps(props) {\n  checks.forEach(function (check) {\n    return check.validate(props);\n  });\n}\n\nvar PropCheck = _createClass(function PropCheck(isInvalid, errorText) {\n  var _this = this;\n\n  _classCallCheck(this, PropCheck);\n\n  this.validate = function (props) {\n    if (_this.isInvalid(props)) {\n      throw new Error(_this.errorText + \" Check usage of react-native-date-picker.\");\n    }\n  };\n\n  this.isInvalid = isInvalid;\n  this.errorText = errorText;\n});\n\nvar dateCheck = new PropCheck(function (props) {\n  return props && !(props.date instanceof Date);\n}, 'Invalid or missing Date prop. Must be a Date object.');\nvar widthCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.width && typeof props.style.width !== 'number';\n}, 'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.');\nvar heightCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.height && typeof props.style.height !== 'number';\n}, 'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.');\nvar modeCheck = new PropCheck(function (props) {\n  return props && props.mode && !['datetime', 'date', 'time'].includes(props.mode);\n}, \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\");\nvar androidVariantCheck = new PropCheck(function (props) {\n  return props && props.androidVariant && !['nativeAndroid', 'iosClone'].includes(props.androidVariant);\n}, \"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\");\nvar themeCheck = new PropCheck(function (props) {\n  return props && props.theme && !['light', 'dark', 'auto'].includes(props.theme);\n}, \"Invalid theme. Valid options: 'light', 'dark', 'auto'\");\nvar checks = [dateCheck, widthCheck, heightCheck, modeCheck, androidVariantCheck, themeCheck];","map":{"version":3,"names":["throwIfInvalidProps","props","checks","forEach","check","validate","PropCheck","isInvalid","errorText","Error","dateCheck","date","Date","widthCheck","style","width","heightCheck","height","modeCheck","mode","includes","androidVariantCheck","androidVariant","themeCheck","theme"],"sources":["/home/zero/GIT/MASTERCAMP_DATA/client/node_modules/react-native-date-picker/src/propChecker.js"],"sourcesContent":["export function throwIfInvalidProps(props) {\n  checks.forEach((check) => check.validate(props))\n}\n\nclass PropCheck {\n  constructor(isInvalid, errorText) {\n    this.isInvalid = isInvalid\n    this.errorText = errorText\n  }\n  validate = (props) => {\n    if (this.isInvalid(props)) {\n      throw new Error(\n        `${this.errorText} Check usage of react-native-date-picker.`\n      )\n    }\n  }\n}\n\nconst dateCheck = new PropCheck(\n  (props) => props && !(props.date instanceof Date),\n  'Invalid or missing Date prop. Must be a Date object.'\n)\n\nconst widthCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.width &&\n    typeof props.style.width !== 'number',\n  'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.'\n)\n\nconst heightCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.height &&\n    typeof props.style.height !== 'number',\n  'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.'\n)\n\nconst modeCheck = new PropCheck(\n  (props) =>\n    props && props.mode && !['datetime', 'date', 'time'].includes(props.mode),\n  \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\"\n)\n\nconst androidVariantCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.androidVariant &&\n    !['nativeAndroid', 'iosClone'].includes(props.androidVariant),\n  \"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\"\n)\n\nconst themeCheck = new PropCheck(\n  (props) =>\n    props && props.theme && !['light', 'dark', 'auto'].includes(props.theme),\n  \"Invalid theme. Valid options: 'light', 'dark', 'auto'\"\n)\n\nconst checks = [\n  dateCheck,\n  widthCheck,\n  heightCheck,\n  modeCheck,\n  androidVariantCheck,\n  themeCheck,\n]\n"],"mappings":";;AAAA,OAAO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoC;EACzCC,MAAM,CAACC,OAAP,CAAe,UAACC,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAX;EAAA,CAAf;AACD;;IAEKK,S,gBACJ,mBAAYC,SAAZ,EAAuBC,SAAvB,EAAkC;EAAA;;EAAA;;EAAA,KAIlCH,QAJkC,GAIvB,UAACJ,KAAD,EAAW;IACpB,IAAI,KAAI,CAACM,SAAL,CAAeN,KAAf,CAAJ,EAA2B;MACzB,MAAM,IAAIQ,KAAJ,CACD,KAAI,CAACD,SADJ,+CAAN;IAGD;EACF,CAViC;;EAChC,KAAKD,SAAL,GAAiBA,SAAjB;EACA,KAAKC,SAAL,GAAiBA,SAAjB;AACD,C;;AAUH,IAAME,SAAS,GAAG,IAAIJ,SAAJ,CAChB,UAACL,KAAD;EAAA,OAAWA,KAAK,IAAI,EAAEA,KAAK,CAACU,IAAN,YAAsBC,IAAxB,CAApB;AAAA,CADgB,EAEhB,sDAFgB,CAAlB;AAKA,IAAMC,UAAU,GAAG,IAAIP,SAAJ,CACjB,UAACL,KAAD;EAAA,OACEA,KAAK,IACLA,KAAK,CAACa,KADN,IAEAb,KAAK,CAACa,KAAN,CAAYC,KAFZ,IAGA,OAAOd,KAAK,CAACa,KAAN,CAAYC,KAAnB,KAA6B,QAJ/B;AAAA,CADiB,EAMjB,kGANiB,CAAnB;AASA,IAAMC,WAAW,GAAG,IAAIV,SAAJ,CAClB,UAACL,KAAD;EAAA,OACEA,KAAK,IACLA,KAAK,CAACa,KADN,IAEAb,KAAK,CAACa,KAAN,CAAYG,MAFZ,IAGA,OAAOhB,KAAK,CAACa,KAAN,CAAYG,MAAnB,KAA8B,QAJhC;AAAA,CADkB,EAMlB,oGANkB,CAApB;AASA,IAAMC,SAAS,GAAG,IAAIZ,SAAJ,CAChB,UAACL,KAAD;EAAA,OACEA,KAAK,IAAIA,KAAK,CAACkB,IAAf,IAAuB,CAAC,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,EAA6BC,QAA7B,CAAsCnB,KAAK,CAACkB,IAA5C,CAD1B;AAAA,CADgB,EAGhB,uDAHgB,CAAlB;AAMA,IAAME,mBAAmB,GAAG,IAAIf,SAAJ,CAC1B,UAACL,KAAD;EAAA,OACEA,KAAK,IACLA,KAAK,CAACqB,cADN,IAEA,CAAC,CAAC,eAAD,EAAkB,UAAlB,EAA8BF,QAA9B,CAAuCnB,KAAK,CAACqB,cAA7C,CAHH;AAAA,CAD0B,EAK1B,mEAL0B,CAA5B;AAQA,IAAMC,UAAU,GAAG,IAAIjB,SAAJ,CACjB,UAACL,KAAD;EAAA,OACEA,KAAK,IAAIA,KAAK,CAACuB,KAAf,IAAwB,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0BJ,QAA1B,CAAmCnB,KAAK,CAACuB,KAAzC,CAD3B;AAAA,CADiB,EAGjB,uDAHiB,CAAnB;AAMA,IAAMtB,MAAM,GAAG,CACbQ,SADa,EAEbG,UAFa,EAGbG,WAHa,EAIbE,SAJa,EAKbG,mBALa,EAMbE,UANa,CAAf"},"metadata":{},"sourceType":"module"}